/*
 * object-storage
 *
 * Aicacia Object Storage API provides blob services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct ObjectApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> ObjectApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> ObjectApiClient<C> {
        ObjectApiClient {
            configuration,
        }
    }
}

pub trait ObjectApi: Send + Sync {
    fn append_object(&self, object_id: i64, part: std::path::PathBuf) -> Pin<Box<dyn Future<Output = Result<i32, Error>> + Send>>;
    fn create_object(&self, create_object_request: models::CreateObjectRequest) -> Pin<Box<dyn Future<Output = Result<models::ObjectInstance, Error>> + Send>>;
    fn delete_object(&self, object_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn get_object_by_id(&self, object_id: i64) -> Pin<Box<dyn Future<Output = Result<models::ObjectInstance, Error>> + Send>>;
    fn get_object_by_path(&self, path: &str) -> Pin<Box<dyn Future<Output = Result<models::ObjectInstance, Error>> + Send>>;
    fn get_objects(&self, offset: Option<i32>, limit: Option<i32>, path: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::PaginationObjectInstance, Error>> + Send>>;
    fn move_object(&self, object_id: i64, move_object_request: models::MoveObjectRequest) -> Pin<Box<dyn Future<Output = Result<models::ObjectInstance, Error>> + Send>>;
    fn read_object_by_id(&self, object_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn read_object_by_path(&self, path: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
}

impl<C: Connect>ObjectApi for ObjectApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn append_object(&self, object_id: i64, part: std::path::PathBuf) -> Pin<Box<dyn Future<Output = Result<i32, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/objects/{object_id}/append".to_string())
        ;
        req = req.with_path_param("object_id".to_string(), object_id.to_string());
        req = req.with_form_param("part".to_string(), unimplemented!());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_object(&self, create_object_request: models::CreateObjectRequest) -> Pin<Box<dyn Future<Output = Result<models::ObjectInstance, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/objects".to_string())
        ;
        req = req.with_body_param(create_object_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_object(&self, object_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/objects/{object_id}".to_string())
        ;
        req = req.with_path_param("object_id".to_string(), object_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_object_by_id(&self, object_id: i64) -> Pin<Box<dyn Future<Output = Result<models::ObjectInstance, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/objects/{object_id}".to_string())
        ;
        req = req.with_path_param("object_id".to_string(), object_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_object_by_path(&self, path: &str) -> Pin<Box<dyn Future<Output = Result<models::ObjectInstance, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/objects/by-path".to_string())
        ;
        req = req.with_query_param("path".to_string(), path.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_objects(&self, offset: Option<i32>, limit: Option<i32>, path: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::PaginationObjectInstance, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/objects".to_string())
        ;
        if let Some(ref s) = offset {
            let query_value = s.to_string();
            req = req.with_query_param("offset".to_string(), query_value);
        }
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }
        if let Some(ref s) = path {
            let query_value = s.to_string();
            req = req.with_query_param("path".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn move_object(&self, object_id: i64, move_object_request: models::MoveObjectRequest) -> Pin<Box<dyn Future<Output = Result<models::ObjectInstance, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/objects/{object_id}/move".to_string())
        ;
        req = req.with_path_param("object_id".to_string(), object_id.to_string());
        req = req.with_body_param(move_object_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn read_object_by_id(&self, object_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/objects/{object_id}/read".to_string())
        ;
        req = req.with_path_param("object_id".to_string(), object_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn read_object_by_path(&self, path: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/objects/by-path/read".to_string())
        ;
        req = req.with_query_param("path".to_string(), path.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
